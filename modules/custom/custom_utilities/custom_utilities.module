<?php
use \Drupal\node\Entity\Node;
use \Drupal\file\Entity\File;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;
use Drupal\block\Entity\Block;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Access\AccessResult;
/**
 * @file
 * Provides functionality for handling postal addresses.
 */
/**
 * Implements hook_theme().
 */
function custom_utilities_theme() {
  return array(
    'worker_table' => array(
      'variables' => array(
      	'header' => array(),
      	'options' => array()
      ),
    ),
    'custom_new_nodes' => [
      'variables' => ['report_rows' => NULL],
      'template' => 'custom-new-nodes', 
    ],
  );
}
function custom_utilities_block_access(Block $block, $operation, AccountInterface $account)
{
	
	if ($operation == 'view')
	{
		if($block->id() == 'customnewnodeblock')
		{
			$roles = \Drupal::currentUser()->getRoles();
			//anonymous
			//adminstrator
			if(in_array('anonymous', $roles))
			{
				//Hide the block for specific user roles like editor
				return AccessResult::forbiddenIf(true)->addCacheableDependency($block);
			}
			//Now based on Node Pages, Hide the block
			// $node = \Drupal::routeMatch()->getParameter('node');
			// if (($node instanceof \Drupal\node\NodeInterface) && ($node->gettype() != 'technologyarticle') )
			// {
			// 	//Hiding the block if the node is not 'technologyarticle' type
			// 	return AccessResult::forbiddenIf(true)->addCacheableDependency($block);
			// }
		}
	}
			
}